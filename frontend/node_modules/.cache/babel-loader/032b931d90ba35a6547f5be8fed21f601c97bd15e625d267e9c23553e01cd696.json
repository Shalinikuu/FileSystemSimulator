{"ast":null,"code":"import axios from 'axios';\n\n// Use relative URLs to leverage the proxy in package.json\nconst API_URL = '';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: false // Important for CORS\n});\n\n// Add interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('Response data:', error.response.data);\n    console.error('Response status:', error.response.status);\n    console.error('Response headers:', error.response.headers);\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('No response received:', error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('Error setting up request:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Auth services\nexport const authService = {\n  login: async (username, password) => {\n    try {\n      console.log('Attempting login with:', {\n        username\n      });\n      const response = await api.post('/login', {\n        username,\n        password\n      });\n      console.log('Login response:', response.data);\n      if (response.data && response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        if (response.data.currentDir) {\n          localStorage.setItem('currentDir', response.data.currentDir);\n        }\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  signup: async (username, password) => {\n    try {\n      const response = await api.post('/signup', {\n        username,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentDir');\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n\n    // If no token exists, user is not authenticated\n    if (!token) {\n      console.log('No auth token found');\n      return false;\n    }\n    try {\n      // Basic validation - check if token format is valid\n      // A proper JWT should have 3 parts separated by dots\n      const tokenParts = token.split('.');\n      if (tokenParts.length !== 3) {\n        console.log('Invalid token format');\n        return false;\n      }\n\n      // More thorough validation would involve checking expiration\n      // For simplicity, we're just checking format here\n\n      return true;\n    } catch (error) {\n      console.error('Error validating token:', error);\n      return false;\n    }\n  }\n};\n\n// File system services\nexport const fileSystemService = {\n  // List directory contents\n  listFiles: async () => {\n    console.log(\"API CALL: Listing files\");\n    try {\n      const response = await api.get('/ls');\n      console.log(\"API RESPONSE - listFiles:\", response);\n      return response;\n    } catch (error) {\n      console.error(\"API ERROR - listFiles:\", error);\n      throw error;\n    }\n  },\n  // Get current directory\n  getCurrentDirectory: async () => {\n    console.log(\"API CALL: Getting current directory\");\n    try {\n      const response = await api.get('/pwd');\n      console.log(\"API RESPONSE - getCurrentDirectory:\", response);\n      return response;\n    } catch (error) {\n      console.error(\"API ERROR - getCurrentDirectory:\", error);\n      throw error;\n    }\n  },\n  // Create directory\n  createDirectory: async folderName => {\n    return await api.post(`/mkdir/${folderName}`);\n  },\n  // Delete directory\n  deleteDirectory: async folderName => {\n    return await api.delete(`/rmdir/${folderName}`);\n  },\n  // Create file\n  createFile: async (fileName, content) => {\n    return await api.post(`/create-file/${fileName}`, content);\n  },\n  // Read file\n  readFile: async fileName => {\n    return await api.get(`/read-file/${fileName}`);\n  },\n  // Edit file\n  editFile: async (fileName, content) => {\n    return await api.put(`/edit-file/${fileName}`, content);\n  },\n  // Append to file\n  appendToFile: async (fileName, content) => {\n    return await api.put(`/append-file/${fileName}`, content);\n  },\n  // Delete file\n  deleteFile: async fileName => {\n    return await api.delete(`/delete-file/${fileName}`);\n  },\n  // Rename item (file or directory)\n  renameItem: async (oldName, newName) => {\n    return await api.post(`/rename/${oldName}/${newName}`);\n  },\n  // Change directory\n  changeDirectory: async path => {\n    const response = await api.post(`/cd/${path}`);\n    if (response.data.currentDir) {\n      localStorage.setItem('currentDir', response.data.currentDir);\n    }\n    return response.data;\n  },\n  // Move up directory\n  moveUpDirectory: async () => {\n    return await api.post('/cd..');\n  },\n  // Start voice command\n  startVoiceCommand: async () => {\n    return await api.post('/start-voice');\n  },\n  // Stop voice command\n  stopVoiceCommand: async () => {\n    return await api.post('/stop-voice');\n  },\n  // Get voice recognition status\n  getVoiceStatus: async () => {\n    return await api.get('/voice-status');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","console","data","status","message","authService","login","username","password","log","post","setItem","currentDir","signup","logout","removeItem","isAuthenticated","tokenParts","split","length","fileSystemService","listFiles","get","getCurrentDirectory","createDirectory","folderName","deleteDirectory","delete","createFile","fileName","content","readFile","editFile","put","appendToFile","deleteFile","renameItem","oldName","newName","changeDirectory","path","moveUpDirectory","startVoiceCommand","stopVoiceCommand","getVoiceStatus"],"sources":["C:/Users/Shalini Kushwaha/FileSystemSimulator/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Use relative URLs to leverage the proxy in package.json\r\nconst API_URL = '';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  },\r\n  withCredentials: false // Important for CORS\r\n});\r\n\r\n// Add interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor for better error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response headers:', error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.error('No response received:', error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.error('Error setting up request:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth services\r\nexport const authService = {\r\n  login: async (username, password) => {\r\n    try {\r\n      console.log('Attempting login with:', { username });\r\n      const response = await api.post('/login', { username, password });\r\n      console.log('Login response:', response.data);\r\n      if (response.data && response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        if (response.data.currentDir) {\r\n          localStorage.setItem('currentDir', response.data.currentDir);\r\n        }\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  signup: async (username, password) => {\r\n    try {\r\n      const response = await api.post('/signup', { username, password });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('currentDir');\r\n  },\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // If no token exists, user is not authenticated\r\n    if (!token) {\r\n      console.log('No auth token found');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Basic validation - check if token format is valid\r\n      // A proper JWT should have 3 parts separated by dots\r\n      const tokenParts = token.split('.');\r\n      if (tokenParts.length !== 3) {\r\n        console.log('Invalid token format');\r\n        return false;\r\n      }\r\n      \r\n      // More thorough validation would involve checking expiration\r\n      // For simplicity, we're just checking format here\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error validating token:', error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n// File system services\r\nexport const fileSystemService = {\r\n  // List directory contents\r\n  listFiles: async () => {\r\n    console.log(\"API CALL: Listing files\");\r\n    try {\r\n      const response = await api.get('/ls');\r\n      console.log(\"API RESPONSE - listFiles:\", response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"API ERROR - listFiles:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Get current directory\r\n  getCurrentDirectory: async () => {\r\n    console.log(\"API CALL: Getting current directory\");\r\n    try {\r\n      const response = await api.get('/pwd');\r\n      console.log(\"API RESPONSE - getCurrentDirectory:\", response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"API ERROR - getCurrentDirectory:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Create directory\r\n  createDirectory: async (folderName) => {\r\n    return await api.post(`/mkdir/${folderName}`);\r\n  },\r\n  \r\n  // Delete directory\r\n  deleteDirectory: async (folderName) => {\r\n    return await api.delete(`/rmdir/${folderName}`);\r\n  },\r\n  \r\n  // Create file\r\n  createFile: async (fileName, content) => {\r\n    return await api.post(`/create-file/${fileName}`, content);\r\n  },\r\n  \r\n  // Read file\r\n  readFile: async (fileName) => {\r\n    return await api.get(`/read-file/${fileName}`);\r\n  },\r\n  \r\n  // Edit file\r\n  editFile: async (fileName, content) => {\r\n    return await api.put(`/edit-file/${fileName}`, content);\r\n  },\r\n  \r\n  // Append to file\r\n  appendToFile: async (fileName, content) => {\r\n    return await api.put(`/append-file/${fileName}`, content);\r\n  },\r\n  \r\n  // Delete file\r\n  deleteFile: async (fileName) => {\r\n    return await api.delete(`/delete-file/${fileName}`);\r\n  },\r\n  \r\n  // Rename item (file or directory)\r\n  renameItem: async (oldName, newName) => {\r\n    return await api.post(`/rename/${oldName}/${newName}`);\r\n  },\r\n  \r\n  // Change directory\r\n  changeDirectory: async (path) => {\r\n    const response = await api.post(`/cd/${path}`);\r\n    if (response.data.currentDir) {\r\n      localStorage.setItem('currentDir', response.data.currentDir);\r\n    }\r\n    return response.data;\r\n  },\r\n  \r\n  // Move up directory\r\n  moveUpDirectory: async () => {\r\n    return await api.post('/cd..');\r\n  },\r\n  \r\n  // Start voice command\r\n  startVoiceCommand: async () => {\r\n    return await api.post('/start-voice');\r\n  },\r\n  \r\n  // Stop voice command\r\n  stopVoiceCommand: async () => {\r\n    return await api.post('/stop-voice');\r\n  },\r\n  \r\n  // Get voice recognition status\r\n  getVoiceStatus: async () => {\r\n    return await api.get('/voice-status');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}